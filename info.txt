1. App
2. db.json in the root directory
3. json-server using the command npx: npx json-server --port 3001 --watch db.json
4. npm install axios
// npm install json-server --save-dev

pack.json >>> "server": "json-server -p 3001 --watch db.json"

5. Sending Data to the Server

axios.post('http://localhost:3001/notes', noteObject).then(response => {
      setNotes(notes.concat(response.data))
      setNewNote('')
    })


6. Toggle the Importance of Notes

const toggleImportanceOf = id => {
// unique URL for each note resource based on its id.
  const url = `http://localhost:3001/notes/${id}`
  // array find method is used to find the note we want to modify, then assign it to the note variable.
  const note = notes.find(n => n.id === id)
  // create a new object that is an exact copy of the old note, apart from the important property that has the value flipped (from true to false or from false to true).
  const changedNote = { ...note, important: !note.important }
  // new note is then sent with a PUT request to the backend where it will replace the old object. callback function sets the component's notes state to a new array that contains all the items from the previous notes array, except for the old note which is replaced by the updated version of it returned by the server:
  axios.put(url, changedNote).then(response => {
    setNotes(notes.map(n => n.id !== id ? n : response.data))
  })
}

7. Extracting Communication with the Backend into a Separate Module
create a src/services directory then a file there called notes.js:
make  functions (getAll, create, and update) 
